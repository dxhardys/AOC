/usr/include/stdlib.h: 364 - 364
--------------------------------------------------------------------------------

364:   return (int) strtol (__nptr, (char **) NULL, 10);
/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt2.c: 209 - 330
--------------------------------------------------------------------------------

209:     pos_val_t *max_val = pv_grid->entries[0];  // On suppose que le premier élément est le max
210:     for (unsigned i = 1; i < pv_grid->nx * pv_grid->ny; i++) {
211:         if (pv_grid->entries[i]->v1 > max_val->v1) {
212:             max_val = pv_grid->entries[i];
[...]
225:     pos_val_t *max_val = &pv_grid->entries[0];  
226:     for (unsigned i = 1; i < pv_grid->nx * pv_grid->ny; i++) {
227:         if (pv_grid->entries[i]->v2 > max_val->v2) {
228:             max_val = pv_grid->entries[i];
[...]
243:    for (i=0; i<pv_grid.nx; i++) {
244:       for (j=0; j<pv_grid.ny; j++) {
245:          free (pv_grid.entries [i * pv_grid.ny + j]);
246:          sum_bytes -= sizeof *(pv_grid.entries[0]);
247:       }
248:    }
249: 
250:    free (pv_grid.entries);
251:    sum_bytes -= pv_grid.nx * pv_grid.ny * sizeof pv_grid.entries[0];
[...]
261:    for (i=0; i<val_grid.nx; i++) {
262:       for (j=0; j<val_grid.ny; j++) {
263:          free (val_grid.entries[i * val_grid.ny + j]);
264:          sum_bytes -= sizeof *(val_grid.entries[0]);
265:       }
266:    }
267: 
268:    free (val_grid.entries);
269:    sum_bytes -= val_grid.nx * val_grid.ny * sizeof val_grid.entries[0];
270: }
271: 
272: // Program entry point: CF comments on top of this file + README
273: int main (int argc, char *argv[])
274: {
275:    // Check arguments number
276:    if (argc < 4) {
277:       fprintf (stderr, "Usage: %s <nb repetitions> <nb points X> <nb points Y>\n", argv[0]);
278:       return EXIT_FAILURE;
279:    }
280: 
281:    // Read arguments from command line
282:    unsigned nrep = (unsigned) atoi (argv[1]);
283:    unsigned nx   = (unsigned) atoi (argv[2]);
284:    unsigned ny   = (unsigned) atoi (argv[3]);
285: 
286:    // Generate points and save them to a text file named "values.txt"
287:    const char *input_file_name = "values.txt";
288:    if (generate_random_values (input_file_name, nx, ny) != 0) {
289:       fprintf (stderr, "Failed to write %u x %u coordinates to %s\n",
290:                nx, ny, input_file_name);
291:       return EXIT_FAILURE;
292:    }
293: 
294:    sum_bytes = 0;
295: 
296:    // Main part: repeated nrep times
297:    unsigned r;
298:    for (r=0; r<nrep; r++) {
299:       value_grid_t value_grid;
300:       pos_val_grid_t pos_val_grid;
301: 
302:       // Load coordinates from disk to memory
303:       if (load_values (input_file_name, &value_grid) != 0) {
304:          fprintf (stderr, "Failed to load coordinates\n");
305:          return EXIT_FAILURE;
306:       }
307: 
308:       // Relate pairs to coordinates
309:       load_positions (value_grid, &pos_val_grid);
[...]
316:       printf ("Max v1: x=%u, y=%u, v1=%f\n",
317:               pos_v1_max->x, pos_v1_max->y, pos_v1_max->v1);
318:       printf ("Max v2: x=%u, y=%u, v2=%f\n",
[...]
327:    remove (input_file_name);
328: 
329:    return EXIT_SUCCESS;
330: }
/usr/include/x86_64-linux-gnu/bits/stdio2.h: 105 - 112
--------------------------------------------------------------------------------

105:   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
[...]
112:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
