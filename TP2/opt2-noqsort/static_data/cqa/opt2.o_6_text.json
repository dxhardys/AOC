{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "tt_insn_vec":
            {
              "type": "tooltip",
              "help": "Portion of vector registers that is actually used. Available only for instructions belonging to a SIMD/vector instructions set (like x86 AVX)",
              "text": "Vectorization"
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "tt_Recip_throughput":
            {
              "type": "tooltip",
              "help": "Average number of cycles to retire that instruction if repeated (assuming independent instructions, with no read-after-write dependency)",
              "text": "Recip. throughput"
            },
          "tt_Nb_FU":
            {
              "type": "tooltip",
              "help": "Number of Fused (Front-end) uops",
              "text": "Nb FU"
            },
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt2.c:227",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt2.c:227",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt2.c:227",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt2.c:227",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt2.c:227",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt2.c:227",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt2.c:227",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt2.c:227"
                ],
              "header": ""
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - VCOMISS: 8 occurrences<<list_path_1_complex_1>>\n",
                "title": "Complex instructions",
                "txt": "Detected COMPLEX INSTRUCTIONS.\n"
              },
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "details": " - Constant unknown stride: 8 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
                "title": "Slow data structures access",
                "txt": "Detected data structures (typically arrays) that cannot be efficiently read/written"
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "16 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in scalar mode (one at a time).\n"
              },
              {
                "title": "Matching between your loop (in the source code) and the binary loop",
                "txt": "The binary loop does not contain any FP arithmetical operations.\nThe binary loop is loading 96 bytes (24 single precision FP elements)."
              },
              {
                "workaround": "Unroll your loop if trip count is significantly higher than target unroll factor and if some data references are common to consecutive iterations. This can be done manually. Or by recompiling with -funroll-loops and/or -floop-unroll-and-jam. Or with the unroll (resp. unroll_and_jam) directive on top of the inner (resp. surrounding) loop. You can enforce an unroll factor: #pragma GCC unroll N",
                "title": "Unroll opportunity",
                "txt": "Loop is potentially data access bound."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 43\nnb uops            : 50\nloop length        : 191\nused x86 registers : 11\nused mmx registers : 0\nused xmm registers : 16\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n"
              },
              {
                "help": "Front-end corresponds to instructions fetching and decoding into macro/micro operations",
                "title": "Front-end",
                "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 8.33 cycles\nfront end            : 8.33 cycles\n"
              },
              {
                "help": "Back-end corresponds to macro/micro operations execution (includes allocating registers, fetching operands etc.)",
                "title": "Back-end",
                "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3  | FP4  | FP5\n-------------------------------------------------------------------------------------------------------------\nuops   | 4.00      | 0.50 | 0.50 | 4.00 | 1.00 | 5.33 | 5.33 | 5.33 | 0.00 | 0.00 | 8.00 | 8.00 | 4.00 | 4.00\ncycles | 4.00      | 0.50 | 0.50 | 4.00 | 1.00 | 5.33 | 5.33 | 5.33 | 0.00 | 0.00 | 8.00 | 8.00 | 4.00 | 4.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3: ALU\n - BRU1: BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2 (256 bits): store address, load\n - FP0 (256 bits): VPU, DIV/SQRT\n - FP1 (256 bits): VPU, DIV/SQRT\n - FP2 (256 bits): VPU\n - FP3 (256 bits): VPU\n - FP4 (256 bits): FP store data\n - FP5 (256 bits): FP store data\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 6.67\nLongest recurrence chain latency (RecMII): 8.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 8.33\nDispatch  : 8.00\nData deps.: 8.00\nOverall L1: 8.33\n"
              },
              {
                "help": "Proportion of vectorizable instructions that are actually vectorized. Higher is better.",
                "title": "Vectorization ratios",
                "txt": "INT\nall    : 0%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 0%\nload    : 0%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\nINT+FP\nall     : 0%\nload    : 0%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\n"
              },
              {
                "help": "Effective/average relative length/width used in vector/SIMD registers. Higher is better.",
                "title": "Vector efficiency ratios",
                "txt": "INT\nall    : 25%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 25%\nFP\nall     : 12%\nload    : 12%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 12%\nINT+FP\nall     : 15%\nload    : 12%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 16%\n"
              },
              {
                "help": "Compare the CQA-computed load/store/compute metrics with the capacity of the core. For instance if CQA computes 24 bytes in the loop in 2 cycles (that is 12 cycles per cycle) and if the core can process up to 16 bytes per cycle, that metric is 75%.",
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 8.33 cycles. At this rate:\n - 12% of peak load performance is reached (11.52 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n"
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the loop is: 15d3\n\nInstruction                 | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0 | FP1 | FP2  | FP3  | FP4  | FP5  | Latency | Recip. throughput | Vectorization\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nMOV (%R15),%RSI             | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 3       | 0.33              | N/A\nMOV 0x8(%R15),%R10          | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 3       | 0.33              | N/A\nMOV 0x10(%R15),%R9          | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 3       | 0.33              | N/A\nMOV 0x18(%R15),%R11         | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 3       | 0.33              | N/A\nMOV 0x20(%R15),%R12         | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 3       | 0.33              | N/A\nMOV 0x28(%R15),%RAX         | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 3       | 0.33              | N/A\nMOV 0x30(%R15),%RDX         | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 3       | 0.33              | N/A\nMOV 0x38(%R15),%RCX         | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 3       | 0.33              | N/A\nVMOVSS 0xc(%RSI),%XMM15     | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMOVSS 0xc(%R10),%XMM1      | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMOVSS 0xc(%R9),%XMM4       | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMOVSS 0xc(%R11),%XMM6      | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMOVSS 0xc(%R12),%XMM8      | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMOVSS 0xc(%RAX),%XMM10     | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMOVSS 0xc(%RDX),%XMM12     | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMOVSS 0xc(%RCX),%XMM14     | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMAXSS %XMM0,%XMM15,%XMM2   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVCOMISS %XMM0,%XMM15        | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0.50 | 0.50 | 5       | 1                 | scal (12.5%)\nCMOVA %RSI,%R8              | 1     | 0.50      | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMAXSS %XMM2,%XMM1,%XMM3    | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVCOMISS %XMM2,%XMM1         | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0.50 | 0.50 | 5       | 1                 | scal (12.5%)\nCMOVA %R10,%R8              | 1     | 0.50      | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMAXSS %XMM3,%XMM4,%XMM5    | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVCOMISS %XMM3,%XMM4         | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0.50 | 0.50 | 5       | 1                 | scal (12.5%)\nCMOVA %R9,%R8               | 1     | 0.50      | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMAXSS %XMM5,%XMM6,%XMM7    | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVCOMISS %XMM5,%XMM6         | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0.50 | 0.50 | 5       | 1                 | scal (12.5%)\nCMOVA %R11,%R8              | 1     | 0.50      | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMAXSS %XMM7,%XMM8,%XMM9    | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVCOMISS %XMM7,%XMM8         | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0.50 | 0.50 | 5       | 1                 | scal (12.5%)\nCMOVA %R12,%R8              | 1     | 0.50      | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMAXSS %XMM9,%XMM10,%XMM11  | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVCOMISS %XMM9,%XMM10        | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0.50 | 0.50 | 5       | 1                 | scal (12.5%)\nCMOVA %RAX,%R8              | 1     | 0.50      | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMAXSS %XMM11,%XMM12,%XMM13 | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVCOMISS %XMM11,%XMM12       | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0.50 | 0.50 | 5       | 1                 | scal (12.5%)\nCMOVA %RDX,%R8              | 1     | 0.50      | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVCOMISS %XMM13,%XMM14       | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0.50 | 0.50 | 5       | 1                 | scal (12.5%)\nCMOVA %RCX,%R8              | 1     | 0.50      | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nADD $0x40,%R15              | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.25              | N/A\nVMAXSS %XMM13,%XMM14,%XMM0  | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 1       | 0.50              | scal (12.5%)\nCMP %R15,%RDI               | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.25              | N/A\nJNE 15d3 <main+0x3f3>       | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50-1            | N/A\n"
              }
            ],
          "header":
            [
            "0% of peak computational performance is used (0.00 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try another compiler or update/tune your current one\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                "details": "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your loop is not vectorized.\nOnly 15% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your loop, you can lower the cost of an iteration from 8.33 to 1.04 cycles (8.00x speedup)."
              },
              {
                "title": "Execution units bottlenecks",
                "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
              }
            ],
          "potential":
            [

            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - VCOMISS: 8 occurrences<<list_path_1_complex_1>>\n",
                  "title": "Complex instructions",
                  "txt": "Detected COMPLEX INSTRUCTIONS.\n"
                },
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "details": " - Constant unknown stride: 8 occurrence(s)\nNon-unit stride (uncontiguous) accesses are not efficiently using data caches\n",
                  "title": "Slow data structures access",
                  "txt": "Detected data structures (typically arrays) that cannot be efficiently read/written"
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "16 SSE or AVX instructions are processing arithmetic or math operations on single precision FP elements in scalar mode (one at a time).\n"
                },
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop does not contain any FP arithmetical operations.\nThe binary loop is loading 96 bytes (24 single precision FP elements)."
                },
                {
                  "workaround": "Unroll your loop if trip count is significantly higher than target unroll factor and if some data references are common to consecutive iterations. This can be done manually. Or by recompiling with -funroll-loops and/or -floop-unroll-and-jam. Or with the unroll (resp. unroll_and_jam) directive on top of the inner (resp. surrounding) loop. You can enforce an unroll factor: #pragma GCC unroll N",
                  "title": "Unroll opportunity",
                  "txt": "Loop is potentially data access bound."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 43\nnb uops            : 50\nloop length        : 191\nused x86 registers : 11\nused mmx registers : 0\nused xmm registers : 16\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n"
                },
                {
                  "help": "Front-end corresponds to instructions fetching and decoding into macro/micro operations",
                  "title": "Front-end",
                  "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 8.33 cycles\nfront end            : 8.33 cycles\n"
                },
                {
                  "help": "Back-end corresponds to macro/micro operations execution (includes allocating registers, fetching operands etc.)",
                  "title": "Back-end",
                  "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3  | FP4  | FP5\n-------------------------------------------------------------------------------------------------------------\nuops   | 4.00      | 0.50 | 0.50 | 4.00 | 1.00 | 5.33 | 5.33 | 5.33 | 0.00 | 0.00 | 8.00 | 8.00 | 4.00 | 4.00\ncycles | 4.00      | 0.50 | 0.50 | 4.00 | 1.00 | 5.33 | 5.33 | 5.33 | 0.00 | 0.00 | 8.00 | 8.00 | 4.00 | 4.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3: ALU\n - BRU1: BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2 (256 bits): store address, load\n - FP0 (256 bits): VPU, DIV/SQRT\n - FP1 (256 bits): VPU, DIV/SQRT\n - FP2 (256 bits): VPU\n - FP3 (256 bits): VPU\n - FP4 (256 bits): FP store data\n - FP5 (256 bits): FP store data\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 6.67\nLongest recurrence chain latency (RecMII): 8.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 8.33\nDispatch  : 8.00\nData deps.: 8.00\nOverall L1: 8.33\n"
                },
                {
                  "help": "Proportion of vectorizable instructions that are actually vectorized. Higher is better.",
                  "title": "Vectorization ratios",
                  "txt": "INT\nall    : 0%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 0%\nload    : 0%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\nINT+FP\nall     : 0%\nload    : 0%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\n"
                },
                {
                  "help": "Effective/average relative length/width used in vector/SIMD registers. Higher is better.",
                  "title": "Vector efficiency ratios",
                  "txt": "INT\nall    : 25%\nload   : NA (no load vectorizable/vectorized instructions)\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 25%\nFP\nall     : 12%\nload    : 12%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 12%\nINT+FP\nall     : 15%\nload    : 12%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 16%\n"
                },
                {
                  "help": "Compare the CQA-computed load/store/compute metrics with the capacity of the core. For instance if CQA computes 24 bytes in the loop in 2 cycles (that is 12 cycles per cycle) and if the core can process up to 16 bytes per cycle, that metric is 75%.",
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 8.33 cycles. At this rate:\n - 12% of peak load performance is reached (11.52 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n"
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 15d3\n\nInstruction                 | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0 | FP1 | FP2  | FP3  | FP4  | FP5  | Latency | Recip. throughput | Vectorization\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nMOV (%R15),%RSI             | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 3       | 0.33              | N/A\nMOV 0x8(%R15),%R10          | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 3       | 0.33              | N/A\nMOV 0x10(%R15),%R9          | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 3       | 0.33              | N/A\nMOV 0x18(%R15),%R11         | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 3       | 0.33              | N/A\nMOV 0x20(%R15),%R12         | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 3       | 0.33              | N/A\nMOV 0x28(%R15),%RAX         | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 3       | 0.33              | N/A\nMOV 0x30(%R15),%RDX         | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 3       | 0.33              | N/A\nMOV 0x38(%R15),%RCX         | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 3       | 0.33              | N/A\nVMOVSS 0xc(%RSI),%XMM15     | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMOVSS 0xc(%R10),%XMM1      | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMOVSS 0xc(%R9),%XMM4       | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMOVSS 0xc(%R11),%XMM6      | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMOVSS 0xc(%R12),%XMM8      | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMOVSS 0xc(%RAX),%XMM10     | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMOVSS 0xc(%RDX),%XMM12     | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMOVSS 0xc(%RCX),%XMM14     | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMAXSS %XMM0,%XMM15,%XMM2   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVCOMISS %XMM0,%XMM15        | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0.50 | 0.50 | 5       | 1                 | scal (12.5%)\nCMOVA %RSI,%R8              | 1     | 0.50      | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMAXSS %XMM2,%XMM1,%XMM3    | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVCOMISS %XMM2,%XMM1         | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0.50 | 0.50 | 5       | 1                 | scal (12.5%)\nCMOVA %R10,%R8              | 1     | 0.50      | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMAXSS %XMM3,%XMM4,%XMM5    | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVCOMISS %XMM3,%XMM4         | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0.50 | 0.50 | 5       | 1                 | scal (12.5%)\nCMOVA %R9,%R8               | 1     | 0.50      | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMAXSS %XMM5,%XMM6,%XMM7    | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVCOMISS %XMM5,%XMM6         | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0.50 | 0.50 | 5       | 1                 | scal (12.5%)\nCMOVA %R11,%R8              | 1     | 0.50      | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMAXSS %XMM7,%XMM8,%XMM9    | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVCOMISS %XMM7,%XMM8         | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0.50 | 0.50 | 5       | 1                 | scal (12.5%)\nCMOVA %R12,%R8              | 1     | 0.50      | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMAXSS %XMM9,%XMM10,%XMM11  | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVCOMISS %XMM9,%XMM10        | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0.50 | 0.50 | 5       | 1                 | scal (12.5%)\nCMOVA %RAX,%R8              | 1     | 0.50      | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMAXSS %XMM11,%XMM12,%XMM13 | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVCOMISS %XMM11,%XMM12       | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0.50 | 0.50 | 5       | 1                 | scal (12.5%)\nCMOVA %RDX,%R8              | 1     | 0.50      | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVCOMISS %XMM13,%XMM14       | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0.50 | 0.50 | 5       | 1                 | scal (12.5%)\nCMOVA %RCX,%R8              | 1     | 0.50      | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50              | scal (25.0%)\nADD $0x40,%R15              | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.25              | N/A\nVMAXSS %XMM13,%XMM14,%XMM0  | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 1       | 0.50              | scal (12.5%)\nCMP %R15,%RDI               | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.25              | N/A\nJNE 15d3 <main+0x3f3>       | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 1       | 0.50-1            | N/A\n"
                }
              ],
            "header":
              [
              "0% of peak computational performance is used (0.00 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your loop is not vectorized.\nOnly 15% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your loop, you can lower the cost of an iteration from 8.33 to 1.04 cycles (8.00x speedup)."
                },
                {
                  "title": "Execution units bottlenecks",
                  "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
                }
              ],
            "potential":
              [

              ]
          }
        ],
      "common":
        {
          "header":
            [
            "The loop is defined in /home/sofiane/AOC/tp-rendu/aoc-tp-2/opt2.c:226-228.\n",
            "The related source loop is not unrolled or unrolled with no peel/tail loop."
            ],
          "nb_paths": 1
        }
    }
}
