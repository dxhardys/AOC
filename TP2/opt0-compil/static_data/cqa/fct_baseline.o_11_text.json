{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "tt_insn_vec":
            {
              "type": "tooltip",
              "help": "Portion of vector registers that is actually used. Available only for instructions belonging to a SIMD/vector instructions set (like x86 AVX)",
              "text": "Vectorization"
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "tt_Recip_throughput":
            {
              "type": "tooltip",
              "help": "Average number of cycles to retire that instruction if repeated (assuming independent instructions, with no read-after-write dependency)",
              "text": "Recip. throughput"
            },
          "tt_Nb_FU":
            {
              "type": "tooltip",
              "help": "Number of Fused (Front-end) uops",
              "text": "Nb FU"
            },
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_call_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:112",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/baseline.c:80",
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:266",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/baseline.c:91",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/baseline.c:131",
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:105",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/baseline.c:111",
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:105",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/baseline.c:93",
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:105"
                ],
              "header": ""
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 10 occurrences<<list_path_1_call_1>>\n",
                "title": "CALL instructions",
                "txt": "Detected function call instructions.\n"
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements."
              },
              {
                "title": "Matching between your function (in the source code) and the binary function",
                "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 72 bytes.\nThe binary function is storing 32 bytes."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 90\nnb uops            : 139\nloop length        : 413\nused x86 registers : 14\nused mmx registers : 0\nused xmm registers : 2\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 5\n"
              },
              {
                "help": "Front-end corresponds to instructions fetching and decoding into macro/micro operations",
                "title": "Front-end",
                "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 23.17 cycles\nfront end            : 23.17 cycles\n"
              },
              {
                "help": "Back-end corresponds to macro/micro operations execution (includes allocating registers, fetching operands etc.)",
                "title": "Back-end",
                "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3  | FP4  | FP5\n-------------------------------------------------------------------------------------------------------------\nuops   | 9.50      | 8.00 | 8.00 | 8.00 | 9.50 | 8.33 | 8.33 | 8.33 | 0.00 | 0.50 | 0.50 | 0.00 | 0.50 | 0.50\ncycles | 9.50      | 8.00 | 8.00 | 8.00 | 9.50 | 8.33 | 8.33 | 8.33 | 0.00 | 0.50 | 0.50 | 0.00 | 0.50 | 0.50\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3: ALU\n - BRU1: BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2 (256 bits): store address, load\n - FP0 (256 bits): VPU, DIV/SQRT\n - FP1 (256 bits): VPU, DIV/SQRT\n - FP2 (256 bits): VPU\n - FP3 (256 bits): VPU\n - FP4 (256 bits): FP store data\n - FP5 (256 bits): FP store data\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 4.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 23.17\nDispatch  : 9.50\nOverall L1: 23.17\n"
              },
              {
                "help": "Proportion of vectorizable instructions that are actually vectorized. Higher is better.",
                "title": "Vectorization ratios",
                "txt": "all     : 0%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\n"
              },
              {
                "help": "Effective/average relative length/width used in vector/SIMD registers. Higher is better.",
                "title": "Vector efficiency ratios",
                "txt": "all     : 18%\nload    : 20%\nstore   : 21%\nmul     : 12%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 17%\n"
              },
              {
                "help": "Compare the CQA-computed load/store/compute metrics with the capacity of the core. For instance if CQA computes 24 bytes in the loop in 2 cycles (that is 12 cycles per cycle) and if the core can process up to 16 bytes per cycle, that metric is 75%.",
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each call to the function takes 23.17 cycles. At this rate:\n - 3% of peak load performance is reached (3.11 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 2% of peak store performance is reached (1.38 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 23.17 to 9.50 cycles (2.44x speedup).\n"
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the function is: 1c30\n\nInstruction                          | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0 | FP1  | FP2  | FP3 | FP4  | FP5  | Latency | Recip. throughput | Vectorization\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nENDBR64                              |       |           |      |      |      |      |      |      |      |     |      |      |     |      |      |         |                   | N/A\nPUSH %RBP                            | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV %RDI,%RDX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nMOV %RSP,%RBP                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nPUSH %R15                            | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R14                            | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R13                            | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R12                            | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %RBX                            | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV %RSI,%R12                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV %RDI,%RBX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nSUB $0x98,%RSP                       | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nLEA 0x15a6(%RIP),%RSI                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV $0x1,%EDI                        | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nMOV %FS:0x28,%RAX                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | N/A\nMOV %RAX,-0x38(%RBP)                 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nXOR %EAX,%EAX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nCALL 11f0 <.plt.sec@start+0xb0>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nLEA 0x159e(%RIP),%RSI                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV %RBX,%RDI                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 1200 <.plt.sec@start+0xc0>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV %RAX,-0xb8(%RBP)                 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nTEST %RAX,%RAX                       | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 1e71 <load_values+0x241>          | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nLEA -0xa0(%RBP),%R13                 | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV %RAX,%RDX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nMOV $0x64,%ESI                       | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nMOV %R13,%RDI                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 11a0 <.plt.sec@start+0x60>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nTEST %RAX,%RAX                       | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 1cd4 <load_values+0xa4>           | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nXOR %EAX,%EAX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nLEA -0xac(%RBP),%RCX                 | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nLEA -0xb0(%RBP),%RDX                 | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nLEA 0x1565(%RIP),%RSI                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV %R13,%RDI                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 11d0 <.plt.sec@start+0x90>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nCMP $0x2,%EAX                        | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nJNE 1e20 <load_values+0x1f0>         | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nVMOVD -0xb0(%RBP),%XMM1              | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 2       | 0.50              | scal (12.5%)\nMOVQ $0,0x8(%R12)                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (12.5%)\nXOR %EBX,%EBX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | scal (12.5%)\nVPINSRD $0x1,-0xac(%RBP),%XMM1,%XMM0 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0.50 | 0.50 | 0   | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMOVQ %XMM0,(%R12)                   | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0.50 | 0.50 | 1       | 1                 | scal (25.0%)\nJMP 1d7b <load_values+0x14b>         | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nNOPL (%RAX)                          | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV -0xb8(%RBP),%RDI                 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nCALL 1180 <.plt.sec@start+0x40>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV -0xb0(%RBP),%R8D                 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (12.5%)\nXOR %EAX,%EAX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nMOV -0xac(%RBP),%R9D                 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (12.5%)\nMOV %R8D,%EDX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (12.5%)\nIMUL %R9D,%EDX                       | 1     | 0         | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 1                 | scal (12.5%)\nCMP %EBX,%EDX                        | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nJNE 1e50 <load_values+0x220>         | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nADD $0x98,%RSP                       | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nPOP %RBX                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R12                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R13                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R14                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R15                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %RBP                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nRET                                  | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nNOPL (%RAX,%RAX,1)                   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV 0x3229(%RIP),%RCX                | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nLEA 0x1272(%RIP),%RDI                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV $0x2b,%EDX                       | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%ESI                        | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nCALL 1210 <.plt.sec@start+0xd0>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV -0xb8(%RBP),%RDI                 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nCALL 1180 <.plt.sec@start+0x40>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV $0x1,%EAX                        | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nJMP 1dc3 <load_values+0x193>         | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV 0x31f9(%RIP),%RCX                | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nMOV $0x33,%EDX                       | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%ESI                        | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nLEA 0x1200(%RIP),%RDI                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nCALL 1210 <.plt.sec@start+0xd0>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV -0xb8(%RBP),%RDI                 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nCALL 1180 <.plt.sec@start+0x40>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nJMP 1e19 <load_values+0x1e9>         | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nNOPL (%RAX,%RAX,1)                   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV 0x31c9(%RIP),%RDI                | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nMOV %EBX,%ECX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (12.5%)\nLEA 0x1240(%RIP),%RDX                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV $0x1,%ESI                        | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nCALL 1220 <.plt.sec@start+0xe0>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nJMP 1e19 <load_values+0x1e9>         | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nNOPW %CS:(%RAX,%RAX,1)               | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nNOP                                  | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\n"
              }
            ],
          "header":
            [
            "Warnings:\n - The number of fused uops of the instruction [ENDBR64] is unknown\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
            "0% of peak computational performance is used (0.00 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "title": "Code clean check",
                "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 23.17 to 2.00 cycles (11.58x speedup)."
              },
              {
                "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                "details": "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your function is not vectorized.\nOnly 18% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 23.17 to 3.25 cycles (7.13x speedup)."
              },
              {
                "title": "Execution units bottlenecks",
                "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
              }
            ],
          "potential":
            [

            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 10 occurrences<<list_path_1_call_1>>\n",
                  "title": "CALL instructions",
                  "txt": "Detected function call instructions.\n"
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements."
                },
                {
                  "title": "Matching between your function (in the source code) and the binary function",
                  "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 72 bytes.\nThe binary function is storing 32 bytes."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 90\nnb uops            : 139\nloop length        : 413\nused x86 registers : 14\nused mmx registers : 0\nused xmm registers : 2\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 5\n"
                },
                {
                  "help": "Front-end corresponds to instructions fetching and decoding into macro/micro operations",
                  "title": "Front-end",
                  "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 23.17 cycles\nfront end            : 23.17 cycles\n"
                },
                {
                  "help": "Back-end corresponds to macro/micro operations execution (includes allocating registers, fetching operands etc.)",
                  "title": "Back-end",
                  "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3  | FP4  | FP5\n-------------------------------------------------------------------------------------------------------------\nuops   | 9.50      | 8.00 | 8.00 | 8.00 | 9.50 | 8.33 | 8.33 | 8.33 | 0.00 | 0.50 | 0.50 | 0.00 | 0.50 | 0.50\ncycles | 9.50      | 8.00 | 8.00 | 8.00 | 9.50 | 8.33 | 8.33 | 8.33 | 0.00 | 0.50 | 0.50 | 0.00 | 0.50 | 0.50\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3: ALU\n - BRU1: BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2 (256 bits): store address, load\n - FP0 (256 bits): VPU, DIV/SQRT\n - FP1 (256 bits): VPU, DIV/SQRT\n - FP2 (256 bits): VPU\n - FP3 (256 bits): VPU\n - FP4 (256 bits): FP store data\n - FP5 (256 bits): FP store data\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 4.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 23.17\nDispatch  : 9.50\nOverall L1: 23.17\n"
                },
                {
                  "help": "Proportion of vectorizable instructions that are actually vectorized. Higher is better.",
                  "title": "Vectorization ratios",
                  "txt": "all     : 0%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\n"
                },
                {
                  "help": "Effective/average relative length/width used in vector/SIMD registers. Higher is better.",
                  "title": "Vector efficiency ratios",
                  "txt": "all     : 18%\nload    : 20%\nstore   : 21%\nmul     : 12%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 17%\n"
                },
                {
                  "help": "Compare the CQA-computed load/store/compute metrics with the capacity of the core. For instance if CQA computes 24 bytes in the loop in 2 cycles (that is 12 cycles per cycle) and if the core can process up to 16 bytes per cycle, that metric is 75%.",
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each call to the function takes 23.17 cycles. At this rate:\n - 3% of peak load performance is reached (3.11 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 2% of peak store performance is reached (1.38 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 23.17 to 9.50 cycles (2.44x speedup).\n"
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the function is: 1c30\n\nInstruction                          | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0 | FP1  | FP2  | FP3 | FP4  | FP5  | Latency | Recip. throughput | Vectorization\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nENDBR64                              |       |           |      |      |      |      |      |      |      |     |      |      |     |      |      |         |                   | N/A\nPUSH %RBP                            | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV %RDI,%RDX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nMOV %RSP,%RBP                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nPUSH %R15                            | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R14                            | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R13                            | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R12                            | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %RBX                            | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV %RSI,%R12                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV %RDI,%RBX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nSUB $0x98,%RSP                       | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nLEA 0x15a6(%RIP),%RSI                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV $0x1,%EDI                        | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nMOV %FS:0x28,%RAX                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | N/A\nMOV %RAX,-0x38(%RBP)                 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nXOR %EAX,%EAX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nCALL 11f0 <.plt.sec@start+0xb0>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nLEA 0x159e(%RIP),%RSI                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV %RBX,%RDI                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 1200 <.plt.sec@start+0xc0>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV %RAX,-0xb8(%RBP)                 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nTEST %RAX,%RAX                       | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 1e71 <load_values+0x241>          | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nLEA -0xa0(%RBP),%R13                 | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV %RAX,%RDX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nMOV $0x64,%ESI                       | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nMOV %R13,%RDI                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 11a0 <.plt.sec@start+0x60>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nTEST %RAX,%RAX                       | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 1cd4 <load_values+0xa4>           | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nXOR %EAX,%EAX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nLEA -0xac(%RBP),%RCX                 | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nLEA -0xb0(%RBP),%RDX                 | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nLEA 0x1565(%RIP),%RSI                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV %R13,%RDI                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 11d0 <.plt.sec@start+0x90>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nCMP $0x2,%EAX                        | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nJNE 1e20 <load_values+0x1f0>         | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nVMOVD -0xb0(%RBP),%XMM1              | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 2       | 0.50              | scal (12.5%)\nMOVQ $0,0x8(%R12)                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (12.5%)\nXOR %EBX,%EBX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | scal (12.5%)\nVPINSRD $0x1,-0xac(%RBP),%XMM1,%XMM0 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0.50 | 0.50 | 0   | 0    | 0    | 1       | 0.50              | scal (12.5%)\nVMOVQ %XMM0,(%R12)                   | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0.50 | 0.50 | 1       | 1                 | scal (25.0%)\nJMP 1d7b <load_values+0x14b>         | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nNOPL (%RAX)                          | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV -0xb8(%RBP),%RDI                 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nCALL 1180 <.plt.sec@start+0x40>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV -0xb0(%RBP),%R8D                 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (12.5%)\nXOR %EAX,%EAX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nMOV -0xac(%RBP),%R9D                 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (12.5%)\nMOV %R8D,%EDX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (12.5%)\nIMUL %R9D,%EDX                       | 1     | 0         | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 1                 | scal (12.5%)\nCMP %EBX,%EDX                        | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nJNE 1e50 <load_values+0x220>         | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nADD $0x98,%RSP                       | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nPOP %RBX                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R12                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R13                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R14                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R15                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %RBP                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nRET                                  | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nNOPL (%RAX,%RAX,1)                   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV 0x3229(%RIP),%RCX                | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nLEA 0x1272(%RIP),%RDI                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV $0x2b,%EDX                       | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%ESI                        | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nCALL 1210 <.plt.sec@start+0xd0>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV -0xb8(%RBP),%RDI                 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nCALL 1180 <.plt.sec@start+0x40>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV $0x1,%EAX                        | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nJMP 1dc3 <load_values+0x193>         | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV 0x31f9(%RIP),%RCX                | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nMOV $0x33,%EDX                       | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%ESI                        | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nLEA 0x1200(%RIP),%RDI                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nCALL 1210 <.plt.sec@start+0xd0>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV -0xb8(%RBP),%RDI                 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nCALL 1180 <.plt.sec@start+0x40>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nJMP 1e19 <load_values+0x1e9>         | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nNOPL (%RAX,%RAX,1)                   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV 0x31c9(%RIP),%RDI                | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nMOV %EBX,%ECX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (12.5%)\nLEA 0x1240(%RIP),%RDX                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV $0x1,%ESI                        | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nCALL 1220 <.plt.sec@start+0xe0>      | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nJMP 1e19 <load_values+0x1e9>         | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nNOPW %CS:(%RAX,%RAX,1)               | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nNOP                                  | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\n"
                }
              ],
            "header":
              [
              "Warnings:\n - The number of fused uops of the instruction [ENDBR64] is unknown\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
              "0% of peak computational performance is used (0.00 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 23.17 to 2.00 cycles (11.58x speedup)."
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your function is not vectorized.\nOnly 18% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 23.17 to 3.25 cycles (7.13x speedup)."
                },
                {
                  "title": "Execution units bottlenecks",
                  "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
                }
              ],
            "potential":
              [

              ]
          }
        ],
      "common":
        {
          "header":
            [
            "The function is defined in:\n - /home/sofiane/AOC/tp-rendu/aoc-tp-2/baseline.c:76-83,90-140\n - /usr/include/x86_64-linux-gnu/bits/stdio2.h:105,112,266\n\n",
            "Warnings:\nIgnoring paths for analysis"
            ]
        }
    }
}
