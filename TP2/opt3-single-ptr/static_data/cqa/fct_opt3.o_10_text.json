{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "tt_insn_vec":
            {
              "type": "tooltip",
              "help": "Portion of vector registers that is actually used. Available only for instructions belonging to a SIMD/vector instructions set (like x86 AVX)",
              "text": "Vectorization"
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "tt_Recip_throughput":
            {
              "type": "tooltip",
              "help": "Average number of cycles to retire that instruction if repeated (assuming independent instructions, with no read-after-write dependency)",
              "text": "Recip. throughput"
            },
          "tt_Nb_FU":
            {
              "type": "tooltip",
              "help": "Number of Fused (Front-end) uops",
              "text": "Nb FU"
            },
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt3.c:118"
                ],
              "header": ""
            },
          "list_path_1_call_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt3.c:121",
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:105",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt3.c:124"
                ],
              "header": ""
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 3 occurrences<<list_path_1_call_1>>\n",
                "title": "CALL instructions",
                "txt": "Detected function call instructions.\n"
              },
              {
                "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - VPEXTRD: 1 occurrences<<list_path_1_complex_1>>\n",
                "title": "Complex instructions",
                "txt": "Detected COMPLEX INSTRUCTIONS.\n"
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements."
              },
              {
                "title": "Matching between your function (in the source code) and the binary function",
                "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 16 bytes.\nThe binary function is storing 24 bytes."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 48\nnb uops            : 63\nloop length        : 167\nused x86 registers : 12\nused mmx registers : 0\nused xmm registers : 2\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n"
              },
              {
                "help": "Front-end corresponds to instructions fetching and decoding into macro/micro operations",
                "title": "Front-end",
                "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 10.50 cycles\nfront end            : 10.50 cycles\n"
              },
              {
                "help": "Back-end corresponds to macro/micro operations execution (includes allocating registers, fetching operands etc.)",
                "title": "Back-end",
                "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3  | FP4  | FP5\n-------------------------------------------------------------------------------------------------------------\nuops   | 4.25      | 4.25 | 4.00 | 4.00 | 3.50 | 2.33 | 2.33 | 2.33 | 0.00 | 0.50 | 0.50 | 0.00 | 0.50 | 0.50\ncycles | 4.25      | 4.25 | 4.00 | 4.00 | 3.50 | 2.33 | 2.33 | 2.33 | 0.00 | 0.50 | 0.50 | 0.00 | 0.50 | 0.50\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3: ALU\n - BRU1: BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2 (256 bits): store address, load\n - FP0 (256 bits): VPU, DIV/SQRT\n - FP1 (256 bits): VPU, DIV/SQRT\n - FP2 (256 bits): VPU\n - FP3 (256 bits): VPU\n - FP4 (256 bits): FP store data\n - FP5 (256 bits): FP store data\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 1.50\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 10.50\nDispatch  : 4.25\nOverall L1: 10.50\n"
              },
              {
                "help": "Proportion of vectorizable instructions that are actually vectorized. Higher is better.",
                "title": "Vectorization ratios",
                "txt": "all     : 5%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 6%\n"
              },
              {
                "help": "Effective/average relative length/width used in vector/SIMD registers. Higher is better.",
                "title": "Vector efficiency ratios",
                "txt": "all     : 21%\nload    : 25%\nstore   : 25%\nmul     : 12%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 20%\n"
              },
              {
                "help": "Compare the CQA-computed load/store/compute metrics with the capacity of the core. For instance if CQA computes 24 bytes in the loop in 2 cycles (that is 12 cycles per cycle) and if the core can process up to 16 bytes per cycle, that metric is 75%.",
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each call to the function takes 10.50 cycles. At this rate:\n - 1% of peak load performance is reached (1.52 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 3% of peak store performance is reached (2.29 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 10.50 to 4.25 cycles (2.47x speedup).\n"
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the function is: 1e20\n\nInstruction                     | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0 | FP1  | FP2  | FP3 | FP4  | FP5  | Latency | Recip. throughput | Vectorization\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nENDBR64                         |       |           |      |      |      |      |      |      |      |     |      |      |     |      |      |         |                   | N/A\nPUSH %RBP                       | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nVMOVQ %RDI,%XMM0                | 1     | 0         | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 2       | 1                 | scal (25.0%)\nMOV %RSP,%RBP                   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nPUSH %R15                       | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R14                       | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R13                       | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R12                       | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nVPEXTRD $0x1,%XMM0,%R12D        | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0.50 | 0.50 | 0   | 0.50 | 0.50 | 4       | 1                 | scal (12.5%)\nPUSH %RBX                       | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV %EDI,%R13D                  | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (12.5%)\nMOV %R12D,%R14D                 | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (12.5%)\nSUB $0x8,%RSP                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV %RDI,(%RDX)                 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nMOV %RDX,%R15                   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nIMUL %EDI,%R14D                 | 1     | 0         | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 1                 | scal (12.5%)\nMOV %RSI,%RBX                   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nSAL $0x4,%R14                   | 1     | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nMOV %R14,%RDI                   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 1190 <.plt.sec@start+0x70> | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV %RAX,0x8(%R15)              | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nTEST %RAX,%RAX                  | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 1fe8 <load_positions+0x1c8>  | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nADD %R14,0x31bd(%RIP)           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nTEST %R13D,%R13D                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nJE 1fd9 <load_positions+0x1b9>  | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nMOV %RAX,%RCX                   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nXOR %EDX,%EDX                   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nVPXOR %XMM8,%XMM8,%XMM8         | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | vect (50.0%)\nTEST %R12D,%R12D                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nJE 1fd9 <load_positions+0x1b9>  | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nNOP                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nADD $0x8,%RSP                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nPOP %RBX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R12                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R13                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R14                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R15                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %RBP                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nRET                             | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV 0x3031(%RIP),%RCX           | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nLEA 0x11e8(%RIP),%RDI           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV $0x19,%EDX                  | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV $0x1,%ESI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nCALL 11d0 <.plt.sec@start+0xb0> | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV $0x1,%EDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nCALL 11c0 <.plt.sec@start+0xa0> | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nNOP                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\n"
              }
            ],
          "header":
            [
            "Warnings:\n - The number of fused uops of the instruction [ENDBR64] is unknown\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
            "0% of peak computational performance is used (0.00 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "title": "Code clean check",
                "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 10.50 to 1.50 cycles (7.00x speedup)."
              },
              {
                "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                "details": "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your function is probably not vectorized.\nOnly 21% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 10.50 to 1.48 cycles (7.11x speedup)."
              },
              {
                "title": "Execution units bottlenecks",
                "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
              }
            ],
          "potential":
            [

            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 3 occurrences<<list_path_1_call_1>>\n",
                  "title": "CALL instructions",
                  "txt": "Detected function call instructions.\n"
                },
                {
                  "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - VPEXTRD: 1 occurrences<<list_path_1_complex_1>>\n",
                  "title": "Complex instructions",
                  "txt": "Detected COMPLEX INSTRUCTIONS.\n"
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements."
                },
                {
                  "title": "Matching between your function (in the source code) and the binary function",
                  "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 16 bytes.\nThe binary function is storing 24 bytes."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 48\nnb uops            : 63\nloop length        : 167\nused x86 registers : 12\nused mmx registers : 0\nused xmm registers : 2\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\n"
                },
                {
                  "help": "Front-end corresponds to instructions fetching and decoding into macro/micro operations",
                  "title": "Front-end",
                  "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 10.50 cycles\nfront end            : 10.50 cycles\n"
                },
                {
                  "help": "Back-end corresponds to macro/micro operations execution (includes allocating registers, fetching operands etc.)",
                  "title": "Back-end",
                  "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3  | FP4  | FP5\n-------------------------------------------------------------------------------------------------------------\nuops   | 4.25      | 4.25 | 4.00 | 4.00 | 3.50 | 2.33 | 2.33 | 2.33 | 0.00 | 0.50 | 0.50 | 0.00 | 0.50 | 0.50\ncycles | 4.25      | 4.25 | 4.00 | 4.00 | 3.50 | 2.33 | 2.33 | 2.33 | 0.00 | 0.50 | 0.50 | 0.00 | 0.50 | 0.50\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3: ALU\n - BRU1: BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2 (256 bits): store address, load\n - FP0 (256 bits): VPU, DIV/SQRT\n - FP1 (256 bits): VPU, DIV/SQRT\n - FP2 (256 bits): VPU\n - FP3 (256 bits): VPU\n - FP4 (256 bits): FP store data\n - FP5 (256 bits): FP store data\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 1.50\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 10.50\nDispatch  : 4.25\nOverall L1: 10.50\n"
                },
                {
                  "help": "Proportion of vectorizable instructions that are actually vectorized. Higher is better.",
                  "title": "Vectorization ratios",
                  "txt": "all     : 5%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 6%\n"
                },
                {
                  "help": "Effective/average relative length/width used in vector/SIMD registers. Higher is better.",
                  "title": "Vector efficiency ratios",
                  "txt": "all     : 21%\nload    : 25%\nstore   : 25%\nmul     : 12%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 20%\n"
                },
                {
                  "help": "Compare the CQA-computed load/store/compute metrics with the capacity of the core. For instance if CQA computes 24 bytes in the loop in 2 cycles (that is 12 cycles per cycle) and if the core can process up to 16 bytes per cycle, that metric is 75%.",
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each call to the function takes 10.50 cycles. At this rate:\n - 1% of peak load performance is reached (1.52 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 3% of peak store performance is reached (2.29 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 10.50 to 4.25 cycles (2.47x speedup).\n"
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the function is: 1e20\n\nInstruction                     | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0 | FP1  | FP2  | FP3 | FP4  | FP5  | Latency | Recip. throughput | Vectorization\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nENDBR64                         |       |           |      |      |      |      |      |      |      |     |      |      |     |      |      |         |                   | N/A\nPUSH %RBP                       | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nVMOVQ %RDI,%XMM0                | 1     | 0         | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 2       | 1                 | scal (25.0%)\nMOV %RSP,%RBP                   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nPUSH %R15                       | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R14                       | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R13                       | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R12                       | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nVPEXTRD $0x1,%XMM0,%R12D        | 2     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0.50 | 0.50 | 0   | 0.50 | 0.50 | 4       | 1                 | scal (12.5%)\nPUSH %RBX                       | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV %EDI,%R13D                  | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (12.5%)\nMOV %R12D,%R14D                 | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (12.5%)\nSUB $0x8,%RSP                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV %RDI,(%RDX)                 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nMOV %RDX,%R15                   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nIMUL %EDI,%R14D                 | 1     | 0         | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 1                 | scal (12.5%)\nMOV %RSI,%RBX                   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nSAL $0x4,%R14                   | 1     | 0         | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nMOV %R14,%RDI                   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 1190 <.plt.sec@start+0x70> | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV %RAX,0x8(%R15)              | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nTEST %RAX,%RAX                  | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 1fe8 <load_positions+0x1c8>  | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nADD %R14,0x31bd(%RIP)           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nTEST %R13D,%R13D                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nJE 1fd9 <load_positions+0x1b9>  | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nMOV %RAX,%RCX                   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nXOR %EDX,%EDX                   | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nVPXOR %XMM8,%XMM8,%XMM8         | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | vect (50.0%)\nTEST %R12D,%R12D                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nJE 1fd9 <load_positions+0x1b9>  | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nNOP                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nADD $0x8,%RSP                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nPOP %RBX                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R12                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R13                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R14                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R15                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %RBP                        | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nRET                             | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV 0x3031(%RIP),%RCX           | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nLEA 0x11e8(%RIP),%RDI           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV $0x19,%EDX                  | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV $0x1,%ESI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nCALL 11d0 <.plt.sec@start+0xb0> | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV $0x1,%EDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nCALL 11c0 <.plt.sec@start+0xa0> | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nNOP                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\n"
                }
              ],
            "header":
              [
              "Warnings:\n - The number of fused uops of the instruction [ENDBR64] is unknown\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
              "0% of peak computational performance is used (0.00 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 10.50 to 1.50 cycles (7.00x speedup)."
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "Store and arithmetical SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your function is probably not vectorized.\nOnly 21% of vector register length is used (average across all SSE/AVX instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 10.50 to 1.48 cycles (7.11x speedup)."
                },
                {
                  "title": "Execution units bottlenecks",
                  "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
                }
              ],
            "potential":
              [

              ]
          }
        ],
      "common":
        {
          "header":
            [
            "The function is defined in:\n - /home/sofiane/AOC/tp-rendu/aoc-tp-2/opt3.c:118-137\n - /usr/include/x86_64-linux-gnu/bits/stdio2.h:105\n\n",
            "Warnings:\nIgnoring paths for analysis"
            ]
        }
    }
}
