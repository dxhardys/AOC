{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "tt_insn_vec":
            {
              "type": "tooltip",
              "help": "Portion of vector registers that is actually used. Available only for instructions belonging to a SIMD/vector instructions set (like x86 AVX)",
              "text": "Vectorization"
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "tt_Recip_throughput":
            {
              "type": "tooltip",
              "help": "Average number of cycles to retire that instruction if repeated (assuming independent instructions, with no read-after-write dependency)",
              "text": "Recip. throughput"
            },
          "tt_Nb_FU":
            {
              "type": "tooltip",
              "help": "Number of Fused (Front-end) uops",
              "text": "Nb FU"
            },
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_complex_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt1.c:95"
                ],
              "header": ""
            },
          "list_path_1_call_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:112",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt1.c:80",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt1.c:88",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt1.c:100",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt1.c:114",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt1.c:121",
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:105",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt1.c:116",
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:105",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt1.c:90",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt1.c:137",
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:105",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt1.c:137",
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:105",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt1.c:105",
                "/usr/include/x86_64-linux-gnu/bits/stdio2.h:105",
                "/home/sofiane/AOC/tp-rendu/aoc-tp-2/opt1.c:147"
                ],
              "header": ""
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 17 occurrences<<list_path_1_call_1>>\n",
                "title": "CALL instructions",
                "txt": "Detected function call instructions.\n"
              },
              {
                "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - VPINSRD: 1 occurrences<<list_path_1_complex_1>>\n",
                "title": "Complex instructions",
                "txt": "Detected COMPLEX INSTRUCTIONS.\n"
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements."
              },
              {
                "title": "Matching between your function (in the source code) and the binary function",
                "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 121 bytes.\nThe binary function is storing 76 bytes."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 148\nnb uops            : 233\nloop length        : 634\nused x86 registers : 14\nused mmx registers : 0\nused xmm registers : 4\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 8\n"
              },
              {
                "help": "Front-end corresponds to instructions fetching and decoding into macro/micro operations",
                "title": "Front-end",
                "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 38.83 cycles\nfront end            : 38.83 cycles\n"
              },
              {
                "help": "Back-end corresponds to macro/micro operations execution (includes allocating registers, fetching operands etc.)",
                "title": "Back-end",
                "txt": "       | ALU0/BRU0 | ALU1  | ALU2  | ALU3  | BRU1  | AGU0  | AGU1  | AGU2  | FP0  | FP1  | FP2  | FP3  | FP4  | FP5\n--------------------------------------------------------------------------------------------------------------------\nuops   | 17.00     | 14.75 | 14.75 | 14.50 | 17.00 | 15.00 | 15.00 | 15.00 | 0.00 | 1.00 | 1.00 | 0.00 | 1.00 | 1.00\ncycles | 17.00     | 14.75 | 14.75 | 14.50 | 17.00 | 15.00 | 15.00 | 15.00 | 0.00 | 1.00 | 1.00 | 0.00 | 1.00 | 1.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3: ALU\n - BRU1: BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2 (256 bits): store address, load\n - FP0 (256 bits): VPU, DIV/SQRT\n - FP1 (256 bits): VPU, DIV/SQRT\n - FP2 (256 bits): VPU\n - FP3 (256 bits): VPU\n - FP4 (256 bits): FP store data\n - FP5 (256 bits): FP store data\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 7.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 38.83\nDispatch  : 17.00\nOverall L1: 38.83\n"
              },
              {
                "help": "Proportion of vectorizable instructions that are actually vectorized. Higher is better.",
                "title": "Vectorization ratios",
                "txt": "INT\nall    : 0%\nload   : 0%\nstore  : 0%\nmul    : 0%\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 33%\nload    : 0%\nstore   : 100%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\nINT+FP\nall     : 1%\nload    : 0%\nstore   : 10%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\n"
              },
              {
                "help": "Effective/average relative length/width used in vector/SIMD registers. Higher is better.",
                "title": "Vector efficiency ratios",
                "txt": "INT\nall    : 19%\nload   : 19%\nstore  : 23%\nmul    : 12%\nadd-sub: 25%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 18%\nFP\nall     : 16%\nload    : 12%\nstore   : 25%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 12%\nINT+FP\nall     : 19%\nload    : 17%\nstore   : 23%\nmul     : 12%\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 18%\n"
              },
              {
                "help": "Compare the CQA-computed load/store/compute metrics with the capacity of the core. For instance if CQA computes 24 bytes in the loop in 2 cycles (that is 12 cycles per cycle) and if the core can process up to 16 bytes per cycle, that metric is 75%.",
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each call to the function takes 38.83 cycles. At this rate:\n - 3% of peak load performance is reached (3.12 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 3% of peak store performance is reached (1.96 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 38.83 to 17.00 cycles (2.28x speedup).\n"
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the function is: 1bf0\n\nInstruction                             | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0 | FP1  | FP2  | FP3 | FP4  | FP5  | Latency | Recip. throughput | Vectorization\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nENDBR64                                 |       |           |      |      |      |      |      |      |      |     |      |      |     |      |      |         |                   | N/A\nPUSH %RBP                               | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV %RDI,%RDX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nMOV %RSP,%RBP                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nPUSH %R15                               | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R14                               | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R13                               | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R12                               | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %RBX                               | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV %RSI,%R13                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV %RDI,%RBX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nSUB $0x48,%RSP                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nLEA 0x15e9(%RIP),%RSI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV $0x1,%EDI                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nMOV %FS:0x28,%RAX                       | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | N/A\nMOV %RAX,-0x38(%RBP)                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nXOR %EAX,%EAX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nCALL 11b0 <.plt.sec@start+0x90>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nLEA 0x15e1(%RIP),%RSI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV %RBX,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 11c0 <.plt.sec@start+0xa0>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nTEST %RAX,%RAX                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 1ef2 <load_values+0x302>             | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nMOV %RAX,%R12                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nMOV %RAX,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nLEA -0x44(%RBP),%RCX                    | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nXOR %EAX,%EAX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nLEA -0x48(%RBP),%RDX                    | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nLEA 0x15cb(%RIP),%RSI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nCALL 1140 <.plt.sec@start+0x20>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nCMP $0x2,%EAX                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nJNE 1e10 <load_values+0x220>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nMOV -0x48(%RBP),%EDX                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (12.5%)\nMOV -0x44(%RBP),%EAX                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | N/A\nVMOVD %EDX,%XMM1                        | 1     | 0         | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 2       | 1                 | scal (12.5%)\nIMUL %EAX,%EDX                          | 1     | 0         | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 1                 | scal (12.5%)\nVPINSRD $0x1,%EAX,%XMM1,%XMM0           | 2     | 0         | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0   | 1    | 0    | 0   | 0    | 0    | 3       | 1                 | scal (12.5%)\nVMOVQ %XMM0,(%R13)                      | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0.50 | 0.50 | 1       | 1                 | scal (25.0%)\nMOV %EDX,%ECX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV %EDX,-0x64(%RBP)                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (12.5%)\nLEA (,%RCX,8),%R14                      | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV %RCX,-0x60(%RBP)                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nMOV %R14,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 11a0 <.plt.sec@start+0x80>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nADD %R14,0x338c(%RIP)                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nMOV %RAX,0x8(%R13)                      | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nTEST %RAX,%RAX                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 1ec8 <load_values+0x2d8>             | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nLEA -0x40(%RBP),%RSI                    | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nXOR %EBX,%EBX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nLEA -0x3c(%RBP),%R15                    | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV -0x64(%RBP),%EDI                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (12.5%)\nMOV %RSI,-0x58(%RBP)                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nTEST %EDI,%EDI                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nJE 1eb9 <load_values+0x2c9>             | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nTESTB $0x1,-0x60(%RBP)                  | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | scal (3.1%)\nJNE 1dc5 <load_values+0x1d5>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nMOV %RSI,%RDX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nXOR %EAX,%EAX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nMOV %R15,%RCX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nLEA 0x1566(%RIP),%RSI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV %R12,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 1140 <.plt.sec@start+0x20>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nCMP $0x2,%EAX                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nJNE 1de6 <load_values+0x1f6>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nMOV $0x8,%EDI                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nCALL 11a0 <.plt.sec@start+0x80>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nTEST %RAX,%RAX                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 1ec8 <load_values+0x2d8>             | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nVMOVSS -0x40(%RBP),%XMM2                | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | scal (12.5%)\nMOV 0x8(%R13),%R8                       | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | N/A\nMOV $0x1,%EBX                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nVINSERTPS $0x10,-0x3c(%RBP),%XMM2,%XMM3 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0.50 | 0.50 | 0   | 0    | 0    | 1       | 0.50              | scal (12.5%)\nADDQ $0x8,0x330c(%RIP)                  | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVLPS %XMM3,(%RAX)                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0.50 | 0.50 | 1       | 1                 | vect (25.0%)\nMOV %RAX,(%R8)                          | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nJMP 1dc5 <load_values+0x1d5>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV 0x3233(%RIP),%RCX                   | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | N/A\nMOV $0x2b,%EDX                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%ESI                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nLEA 0x1272(%RIP),%RDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nCALL 11d0 <.plt.sec@start+0xb0>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV %R12,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 1170 <.plt.sec@start+0x50>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nJMP 1e35 <load_values+0x245>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nNOPL (%RAX)                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV 0x3209(%RIP),%RCX                   | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | N/A\nLEA 0x121a(%RIP),%RDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV $0x33,%EDX                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%ESI                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nCALL 11d0 <.plt.sec@start+0xb0>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV %R12,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 1170 <.plt.sec@start+0x50>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV $0x1,%EAX                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nNOPW (%RAX,%RAX,1)                      | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV -0x38(%RBP),%RDX                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nSUB %FS:0x28,%RDX                       | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | scal (25.0%)\nJNE 1f17 <load_values+0x327>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nADD $0x48,%RSP                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nPOP %RBX                                | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R12                                | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R13                                | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R14                                | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R15                                | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %RBP                                | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nRET                                     | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nNOPW %CS:(%RAX,%RAX,1)                  | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nNOPL (%RAX)                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV %R12,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nINC %EBX                                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nCALL 1170 <.plt.sec@start+0x50>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nCMP %EBX,-0x64(%RBP)                    | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nJNE 1e90 <load_values+0x2a0>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nXOR %EAX,%EAX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nJMP 1e40 <load_values+0x250>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nNOPW %CS:(%RAX,%RAX,1)                  | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nXCHG %AX,%AX                            | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV -0x44(%RBP),%R9D                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (12.5%)\nMOV -0x48(%RBP),%R8D                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | N/A\nMOV %EBX,%ECX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nLEA 0x11ff(%RIP),%RDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV 0x3178(%RIP),%RDI                   | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nMOV $0x1,%ESI                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nXOR %EAX,%EAX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nCALL 11e0 <.plt.sec@start+0xc0>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nJMP 1e35 <load_values+0x245>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV %R12,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 1170 <.plt.sec@start+0x50>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nXOR %EAX,%EAX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nJMP 1e40 <load_values+0x250>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV 0x3151(%RIP),%RCX                   | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | N/A\nMOV $0x1a,%EDX                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%ESI                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nLEA 0x134e(%RIP),%RDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nCALL 11d0 <.plt.sec@start+0xb0>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV %R12,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 1170 <.plt.sec@start+0x50>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nJMP 1e35 <load_values+0x245>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV 0x3127(%RIP),%RDI                   | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nMOV %RBX,%RCX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nLEA 0x1315(%RIP),%RDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV $0x1,%ESI                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nXOR %EAX,%EAX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nCALL 11e0 <.plt.sec@start+0xc0>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nOR $-0x1,%EAX                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nJMP 1e40 <load_values+0x250>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nCALL 1180 <.plt.sec@start+0x60>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nNOPL (%RAX)                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\n"
              }
            ],
          "header":
            [
            "Warnings:\n - The number of fused uops of the instruction [ENDBR64] is unknown\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
            "0% of peak computational performance is used (0.00 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "title": "Code clean check",
                "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 38.83 to 4.50 cycles (8.63x speedup)."
              },
              {
                "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                "details": "1% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 0% of SSE/AVX loads are used in vector version.\n - 10% of SSE/AVX stores are used in vector version.\n - 0% of SSE/AVX addition or subtraction instructions are used in vector version.\n - 0% of SSE/AVX multiply instructions are used in vector version.\n - 0% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized function can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your function is not vectorized.\nOnly 19% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your function, you can lower the cost of an iteration from 38.83 to 2.52 cycles (15.43x speedup)."
              },
              {
                "title": "Execution units bottlenecks",
                "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
              }
            ],
          "potential":
            [

            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 17 occurrences<<list_path_1_call_1>>\n",
                  "title": "CALL instructions",
                  "txt": "Detected function call instructions.\n"
                },
                {
                  "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - VPINSRD: 1 occurrences<<list_path_1_complex_1>>\n",
                  "title": "Complex instructions",
                  "txt": "Detected COMPLEX INSTRUCTIONS.\n"
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements."
                },
                {
                  "title": "Matching between your function (in the source code) and the binary function",
                  "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 121 bytes.\nThe binary function is storing 76 bytes."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 148\nnb uops            : 233\nloop length        : 634\nused x86 registers : 14\nused mmx registers : 0\nused xmm registers : 4\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 8\n"
                },
                {
                  "help": "Front-end corresponds to instructions fetching and decoding into macro/micro operations",
                  "title": "Front-end",
                  "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 38.83 cycles\nfront end            : 38.83 cycles\n"
                },
                {
                  "help": "Back-end corresponds to macro/micro operations execution (includes allocating registers, fetching operands etc.)",
                  "title": "Back-end",
                  "txt": "       | ALU0/BRU0 | ALU1  | ALU2  | ALU3  | BRU1  | AGU0  | AGU1  | AGU2  | FP0  | FP1  | FP2  | FP3  | FP4  | FP5\n--------------------------------------------------------------------------------------------------------------------\nuops   | 17.00     | 14.75 | 14.75 | 14.50 | 17.00 | 15.00 | 15.00 | 15.00 | 0.00 | 1.00 | 1.00 | 0.00 | 1.00 | 1.00\ncycles | 17.00     | 14.75 | 14.75 | 14.50 | 17.00 | 15.00 | 15.00 | 15.00 | 0.00 | 1.00 | 1.00 | 0.00 | 1.00 | 1.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU, BRU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3: ALU\n - BRU1: BRU\n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2 (256 bits): store address, load\n - FP0 (256 bits): VPU, DIV/SQRT\n - FP1 (256 bits): VPU, DIV/SQRT\n - FP2 (256 bits): VPU\n - FP3 (256 bits): VPU\n - FP4 (256 bits): FP store data\n - FP5 (256 bits): FP store data\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 7.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 38.83\nDispatch  : 17.00\nOverall L1: 38.83\n"
                },
                {
                  "help": "Proportion of vectorizable instructions that are actually vectorized. Higher is better.",
                  "title": "Vectorization ratios",
                  "txt": "INT\nall    : 0%\nload   : 0%\nstore  : 0%\nmul    : 0%\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 33%\nload    : 0%\nstore   : 100%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\nINT+FP\nall     : 1%\nload    : 0%\nstore   : 10%\nmul     : 0%\nadd-sub : 0%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\n"
                },
                {
                  "help": "Effective/average relative length/width used in vector/SIMD registers. Higher is better.",
                  "title": "Vector efficiency ratios",
                  "txt": "INT\nall    : 19%\nload   : 19%\nstore  : 23%\nmul    : 12%\nadd-sub: 25%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 18%\nFP\nall     : 16%\nload    : 12%\nstore   : 25%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 12%\nINT+FP\nall     : 19%\nload    : 17%\nstore   : 23%\nmul     : 12%\nadd-sub : 25%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 18%\n"
                },
                {
                  "help": "Compare the CQA-computed load/store/compute metrics with the capacity of the core. For instance if CQA computes 24 bytes in the loop in 2 cycles (that is 12 cycles per cycle) and if the core can process up to 16 bytes per cycle, that metric is 75%.",
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each call to the function takes 38.83 cycles. At this rate:\n - 3% of peak load performance is reached (3.12 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 3% of peak store performance is reached (1.96 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 38.83 to 17.00 cycles (2.28x speedup).\n"
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the function is: 1bf0\n\nInstruction                             | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0 | FP1  | FP2  | FP3 | FP4  | FP5  | Latency | Recip. throughput | Vectorization\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nENDBR64                                 |       |           |      |      |      |      |      |      |      |     |      |      |     |      |      |         |                   | N/A\nPUSH %RBP                               | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV %RDI,%RDX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nMOV %RSP,%RBP                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nPUSH %R15                               | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R14                               | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R13                               | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %R12                               | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nPUSH %RBX                               | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nMOV %RSI,%R13                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV %RDI,%RBX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nSUB $0x48,%RSP                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nLEA 0x15e9(%RIP),%RSI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV $0x1,%EDI                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nMOV %FS:0x28,%RAX                       | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | N/A\nMOV %RAX,-0x38(%RBP)                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nXOR %EAX,%EAX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nCALL 11b0 <.plt.sec@start+0x90>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nLEA 0x15e1(%RIP),%RSI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV %RBX,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 11c0 <.plt.sec@start+0xa0>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nTEST %RAX,%RAX                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 1ef2 <load_values+0x302>             | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nMOV %RAX,%R12                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nMOV %RAX,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nLEA -0x44(%RBP),%RCX                    | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nXOR %EAX,%EAX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nLEA -0x48(%RBP),%RDX                    | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nLEA 0x15cb(%RIP),%RSI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nCALL 1140 <.plt.sec@start+0x20>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nCMP $0x2,%EAX                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nJNE 1e10 <load_values+0x220>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nMOV -0x48(%RBP),%EDX                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (12.5%)\nMOV -0x44(%RBP),%EAX                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | N/A\nVMOVD %EDX,%XMM1                        | 1     | 0         | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 2       | 1                 | scal (12.5%)\nIMUL %EAX,%EDX                          | 1     | 0         | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 1                 | scal (12.5%)\nVPINSRD $0x1,%EAX,%XMM1,%XMM0           | 2     | 0         | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0   | 1    | 0    | 0   | 0    | 0    | 3       | 1                 | scal (12.5%)\nVMOVQ %XMM0,(%R13)                      | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0.50 | 0.50 | 1       | 1                 | scal (25.0%)\nMOV %EDX,%ECX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV %EDX,-0x64(%RBP)                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (12.5%)\nLEA (,%RCX,8),%R14                      | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV %RCX,-0x60(%RBP)                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nMOV %R14,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 11a0 <.plt.sec@start+0x80>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nADD %R14,0x338c(%RIP)                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nMOV %RAX,0x8(%R13)                      | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nTEST %RAX,%RAX                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 1ec8 <load_values+0x2d8>             | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nLEA -0x40(%RBP),%RSI                    | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nXOR %EBX,%EBX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nLEA -0x3c(%RBP),%R15                    | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV -0x64(%RBP),%EDI                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (12.5%)\nMOV %RSI,-0x58(%RBP)                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nTEST %EDI,%EDI                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nJE 1eb9 <load_values+0x2c9>             | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nTESTB $0x1,-0x60(%RBP)                  | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | scal (3.1%)\nJNE 1dc5 <load_values+0x1d5>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nMOV %RSI,%RDX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nXOR %EAX,%EAX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nMOV %R15,%RCX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nLEA 0x1566(%RIP),%RSI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV %R12,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 1140 <.plt.sec@start+0x20>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nCMP $0x2,%EAX                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nJNE 1de6 <load_values+0x1f6>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nMOV $0x8,%EDI                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nCALL 11a0 <.plt.sec@start+0x80>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nTEST %RAX,%RAX                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nJE 1ec8 <load_values+0x2d8>             | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nVMOVSS -0x40(%RBP),%XMM2                | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | scal (12.5%)\nMOV 0x8(%R13),%R8                       | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | N/A\nMOV $0x1,%EBX                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nVINSERTPS $0x10,-0x3c(%RBP),%XMM2,%XMM3 | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0.50 | 0.50 | 0   | 0    | 0    | 1       | 0.50              | scal (12.5%)\nADDQ $0x8,0x330c(%RIP)                  | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | scal (25.0%)\nVMOVLPS %XMM3,(%RAX)                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0.50 | 0.50 | 1       | 1                 | vect (25.0%)\nMOV %RAX,(%R8)                          | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 4       | 0.50              | scal (25.0%)\nJMP 1dc5 <load_values+0x1d5>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV 0x3233(%RIP),%RCX                   | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | N/A\nMOV $0x2b,%EDX                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%ESI                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nLEA 0x1272(%RIP),%RDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nCALL 11d0 <.plt.sec@start+0xb0>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV %R12,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 1170 <.plt.sec@start+0x50>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nJMP 1e35 <load_values+0x245>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nNOPL (%RAX)                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV 0x3209(%RIP),%RCX                   | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | N/A\nLEA 0x121a(%RIP),%RDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV $0x33,%EDX                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%ESI                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nCALL 11d0 <.plt.sec@start+0xb0>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV %R12,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 1170 <.plt.sec@start+0x50>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV $0x1,%EAX                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nNOPW (%RAX,%RAX,1)                      | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV -0x38(%RBP),%RDX                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nSUB %FS:0x28,%RDX                       | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | scal (25.0%)\nJNE 1f17 <load_values+0x327>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nADD $0x48,%RSP                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (25.0%)\nPOP %RBX                                | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R12                                | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R13                                | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R14                                | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %R15                                | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nPOP %RBP                                | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nRET                                     | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50              | N/A\nNOPW %CS:(%RAX,%RAX,1)                  | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nNOPL (%RAX)                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV %R12,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nINC %EBX                                | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nCALL 1170 <.plt.sec@start+0x50>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nCMP %EBX,-0x64(%RBP)                    | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.33              | N/A\nJNE 1e90 <load_values+0x2a0>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.50-1            | N/A\nXOR %EAX,%EAX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nJMP 1e40 <load_values+0x250>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nNOPW %CS:(%RAX,%RAX,1)                  | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nXCHG %AX,%AX                            | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nMOV -0x44(%RBP),%R9D                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (12.5%)\nMOV -0x48(%RBP),%R8D                    | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | N/A\nMOV %EBX,%ECX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nLEA 0x11ff(%RIP),%RDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV 0x3178(%RIP),%RDI                   | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nMOV $0x1,%ESI                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nXOR %EAX,%EAX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nCALL 11e0 <.plt.sec@start+0xc0>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nJMP 1e35 <load_values+0x245>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV %R12,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 1170 <.plt.sec@start+0x50>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nXOR %EAX,%EAX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nJMP 1e40 <load_values+0x250>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV 0x3151(%RIP),%RCX                   | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | N/A\nMOV $0x1a,%EDX                          | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nMOV $0x1,%ESI                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nLEA 0x134e(%RIP),%RDI                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nCALL 11d0 <.plt.sec@start+0xb0>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV %R12,%RDI                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | scal (25.0%)\nCALL 1170 <.plt.sec@start+0x50>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nJMP 1e35 <load_values+0x245>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nMOV 0x3127(%RIP),%RDI                   | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 3       | 0.33              | scal (25.0%)\nMOV %RBX,%RCX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\nLEA 0x1315(%RIP),%RDX                   | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nMOV $0x1,%ESI                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | scal (12.5%)\nXOR %EAX,%EAX                           | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.25              | N/A\nCALL 11e0 <.plt.sec@start+0xc0>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nOR $-0x1,%EAX                           | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 1       | 0.25              | N/A\nJMP 1e40 <load_values+0x250>            | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nCALL 1180 <.plt.sec@start+0x60>         | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 1                 | N/A\nNOPL (%RAX)                             | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0    | 0    | 0   | 0    | 0    | 0       | 0.17              | N/A\n"
                }
              ],
            "header":
              [
              "Warnings:\n - The number of fused uops of the instruction [ENDBR64] is unknown\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
              "0% of peak computational performance is used (0.00 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 38.83 to 4.50 cycles (8.63x speedup)."
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "1% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 0% of SSE/AVX loads are used in vector version.\n - 10% of SSE/AVX stores are used in vector version.\n - 0% of SSE/AVX addition or subtraction instructions are used in vector version.\n - 0% of SSE/AVX multiply instructions are used in vector version.\n - 0% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized function can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your function is not vectorized.\nOnly 19% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your function, you can lower the cost of an iteration from 38.83 to 2.52 cycles (15.43x speedup)."
                },
                {
                  "title": "Execution units bottlenecks",
                  "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks."
                }
              ],
            "potential":
              [

              ]
          }
        ],
      "common":
        {
          "header":
            [
            "The function is defined in:\n - /usr/include/x86_64-linux-gnu/bits/stdio2.h:105,112\n - /home/sofiane/AOC/tp-rendu/aoc-tp-2/opt1.c:76-122,128-147\n\n",
            "Warnings:\nIgnoring paths for analysis"
            ]
        }
    }
}
