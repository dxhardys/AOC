/usr/include/stdlib.h: 364 - 364
--------------------------------------------------------------------------------

364:   return (int) strtol (__nptr, (char **) NULL, 10);
/home/sofiane/AOC/tp-rendu/AOC/driver.c: 19 - 128
--------------------------------------------------------------------------------

19:    for (i=0; i<n; i++){
20:          a[i] = (double) rand() / RAND_MAX;
[...]
27:    for (i=0; i<n; i++){
28:          a[i] = (float) rand() / RAND_MAX;
[...]
43: int main (int argc, char *argv[]) {
44:    /* check command line arguments */
45:    if (argc != 4) {
46:       fprintf (stderr, "Usage: %s <size> <nb warmup repets> <nb measure repets>\n", argv[0]);
47:       return EXIT_FAILURE;
48:    }
49: 
50:    /* get command line arguments */
51:    const unsigned size = atoi (argv[1]); /* problem size */
52:    const unsigned repw = atoi (argv[2]); /* number of warmup repetitions */
53:    const unsigned repm = atoi (argv[3]); /* number of repetitions during measurement */
54: 
55:    uint64_t tdiff [NB_METAS];
56: 
57:    unsigned m;
58:    for (m=0; m<NB_METAS; m++) {
59:       printf ("Metarepetition %u/%d: running %u warmup instances and %u measure instances\n", m+1, NB_METAS,
[...]
65:       double *a = (double*)malloc(size * sizeof(double));
66:       float *b  = (float*)malloc (size * sizeof(float));
67:       float *c  = (float*)malloc (size * sizeof(float));
68:       float *d  = (float*)malloc(12 * sizeof(float) ) ; 
69: 
70:       /* init arrays */
71:       srand(0);
[...]
78:       if (m == 0) {
79:          for (i=0; i<repw; i++)
80:             kernel (size, a, b, c, d);
81:       } else {
82:          kernel (size, a, b, c, d);
83:       }
84: 
85:       /* measure repm repetitions */
86:       const uint64_t t1 = rdtsc();
87:       for (i=0; i<repm; i++) {
88:          kernel (size, a, b, c, d);
89:       }
90:       const uint64_t t2 = rdtsc();
91:       tdiff[m] = t2 - t1;
92: 
93:       /* free arrays. TODO: adjust for each kernel */
94:       free (a);
95:       free (b);
96:       free (c);
97:       free (d);
98:    }
99: 
100:    const unsigned nb_inner_iters = size * size * size; // TODO adjust for each kernel
101:    qsort (tdiff, NB_METAS, sizeof tdiff[0], cmp_uint64);
102: 
103:    // Minimum value: should be at least 2000 RDTSC-cycles
104:    const uint64_t min = tdiff[0];
105:    if (min < 2000) {
106:       fprintf (stderr, "Time for the fastest metarepet. is less than 2000 RDTSC-cycles.\n"
107:                "Rerun with more measure-repetitions\n");
108:       return EXIT_FAILURE;
109:    }
110:    printf ("MIN %lu RDTSC-cycles (%.2f per inner-iter)\n",
111:            min, (float) min / nb_inner_iters);
112: 
113:    // Median value
114:    const uint64_t med = tdiff[NB_METAS/2];
115:    printf ("MED %lu RDTSC-cycles (%.2f per inner-iter)\n",
116:            med, (float) med / nb_inner_iters);
117: 
118:    // Stability: (med-min)/min
119:    const float stab = (med - min) * 100.0f / min;
120:    if (stab >= 10)
121:       printf ("BAD STABILITY: %.2f %%\n", stab);
122:    else if (stab >= 5)
123:       printf ("AVERAGE STABILITY: %.2f %%\n", stab);
124:    else
125:       printf ("GOOD STABILITY: %.2f %%\n", stab);
126: 
127:    return EXIT_SUCCESS;
128: }
/usr/include/x86_64-linux-gnu/bits/stdio2.h: 105 - 112
--------------------------------------------------------------------------------

105:   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
[...]
112:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
