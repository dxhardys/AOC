{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500,
                },
            },
        },
      "AVG":
        {
          "hint":
            [
              {
                "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 1.50 occurrences\n",
                "title": "CALL instructions",
                "txt": "Detected function call instructions.\n",
              },
              {
                "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - LEAVE: 1 occurrences\n - VPINSRQ: 2 occurrences\n",
                "title": "Complex instructions",
                "txt": "Detected COMPLEX INSTRUCTIONS.\n",
              },
              {
                "title": "Type of elements and instruction set",
                "txt": "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements.",
              },
              {
                "title": "Matching between your function (in the source code) and the binary function",
                "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 24 bytes.\nThe binary function is storing 48 bytes.",
              },
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 27\nnb uops            : 36\nloop length        : 120.50\nused x86 registers : 8\nused mmx registers : 0\nused xmm registers : 5\nused ymm registers : 2\nused zmm registers : 0\nnb stack references: 3\n",
              },
              {
                "title": "Front-end",
                "txt": "MACRO FUSION NOT POSSIBLE\nmicro-operation queue: 6.00 cycles\nfront end            : 6.00 cycles\n",
              },
              {
                "title": "Back-end",
                "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3  | FP4  | FP5\n-------------------------------------------------------------------------------------------------------------\nuops   | 2.13      | 2.00 | 5.00 | 1.88 | 1.50 | 2.67 | 2.67 | 2.67 | 1.00 | 2.00 | 0.00 | 0.00 | 1.00 | 1.00\ncycles | 2.13      | 2.00 | 5.00 | 1.88 | 1.50 | 2.67 | 2.67 | 2.67 | 1.00 | 2.00 | 0.00 | 0.00 | 1.00 | 1.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3: ALU\n - BRU1: \n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2 (256 bits): store address, load\n - FP0 (256 bits): VPU, DIV/SQRT\n - FP1 (256 bits): VPU, DIV/SQRT\n - FP2 (256 bits): VPU\n - FP3 (256 bits): VPU\n - FP4 (256 bits): FP store data\n - FP5 (256 bits): FP store data\n\nCycles executing div or sqrt instructions: NA\n",
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 6.00\nDispatch  : 5.00\nOverall L1: 6.00\n",
              },
              {
                "title": "Vectorization ratios",
                "txt": "all     : 21%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : 33%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 18%\n",
              },
              {
                "title": "Vector efficiency ratios",
                "txt": "all     : 31%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : 50%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 26%\n",
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each call to the function takes 6.00 cycles. At this rate:\n - 4% of peak load performance is reached (4.01 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 12% of peak store performance is reached (8.02 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n",
              },
            ],
          "header":
            [
            "0% of peak computational performance is used (0.00 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))",
            ],
          "brief":
            [
            ],
          "gain":
            [
              {
                "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                "details": "21% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 33% of SSE/AVX stores are used in vector version.\n - 18% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized function can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your function is poorly vectorized.\nOnly 31% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your function, you can lower the cost of an iteration from 6.00 to 5.11 cycles (1.17x speedup).",
              },
            ],
          "potential":
            [
            ],
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 1 occurrences\n",
                  "title": "CALL instructions",
                  "txt": "Detected function call instructions.\n",
                },
                {
                  "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - LEAVE: 1 occurrences\n - VPINSRQ: 2 occurrences\n",
                  "title": "Complex instructions",
                  "txt": "Detected COMPLEX INSTRUCTIONS.\n",
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements.",
                },
                {
                  "title": "Matching between your function (in the source code) and the binary function",
                  "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 24 bytes.\nThe binary function is storing 48 bytes.",
                },
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 27\nnb uops            : 34\nloop length        : 115\nused x86 registers : 8\nused mmx registers : 0\nused xmm registers : 5\nused ymm registers : 2\nused zmm registers : 0\nnb stack references: 3\n",
                },
                {
                  "title": "Front-end",
                  "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 5.67 cycles\nfront end            : 5.67 cycles\n",
                },
                {
                  "title": "Back-end",
                  "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3  | FP4  | FP5\n-------------------------------------------------------------------------------------------------------------\nuops   | 2.25      | 2.25 | 5.00 | 2.00 | 1.50 | 2.67 | 2.67 | 2.67 | 1.00 | 2.00 | 0.00 | 0.00 | 1.00 | 1.00\ncycles | 2.25      | 2.25 | 5.00 | 2.00 | 1.50 | 2.67 | 2.67 | 2.67 | 1.00 | 2.00 | 0.00 | 0.00 | 1.00 | 1.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3: ALU\n - BRU1: \n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2 (256 bits): store address, load\n - FP0 (256 bits): VPU, DIV/SQRT\n - FP1 (256 bits): VPU, DIV/SQRT\n - FP2 (256 bits): VPU\n - FP3 (256 bits): VPU\n - FP4 (256 bits): FP store data\n - FP5 (256 bits): FP store data\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 2.50\n",
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 5.67\nDispatch  : 5.00\nOverall L1: 5.67\n",
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "all     : 21%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : 33%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 18%\n",
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "all     : 31%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : 50%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 26%\n",
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each call to the function takes 5.67 cycles. At this rate:\n - 4% of peak load performance is reached (4.24 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 13% of peak store performance is reached (8.47 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n",
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 5.67 to 5.00 cycles (1.13x speedup).\n",
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the function is: 2530\n\nInstruction                        | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2 | FP3 | FP4  | FP5  | Latency | Recip. throughput\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nENDBR64\nPUSH %RBP                          | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50\nVMOVQ %RCX,%XMM2                   | 1     | 0         | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 2       | 1\nVMOVQ %RSI,%XMM3                   | 1     | 0         | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 2       | 1\nVMOVD %EDI,%XMM5                   | 1     | 0         | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 2       | 1\nMOV %RSP,%RBP                      | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.17\nAND $-0x20,%RSP                    | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25\nVPINSRQ $0x1,%RDX,%XMM3,%XMM0      | 2     | 0         | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 0   | 0   | 0    | 0    | 3       | 1\nVPINSRQ $0x1,%R8,%XMM2,%XMM1       | 2     | 0         | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 0   | 0   | 0    | 0    | 3       | 1\nSUB $0x40,%RSP                     | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25\nVINSERTI128 $0x1,%XMM1,%YMM0,%YMM4 | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 0    | 0    | 1       | 1\nXOR %ECX,%ECX                      | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25\nXOR %EDX,%EDX                      | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25\nMOV %FS:0x28,%RAX                  | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 0    | 0    | 3       | 0.33\nMOV %RAX,0x38(%RSP)                | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 0    | 0    | 4       | 0.50\nXOR %EAX,%EAX                      | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25\nMOV %RSP,%RSI                      | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.17\nVMOVDQA %YMM4,(%RSP)               | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 4       | 1\nVMOVQ %XMM5,0x20(%RSP)             | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 1       | 1\nLEA -0x429(%RIP),%RDI              | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25\nVZEROUPPER                         | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.17\nCALL 11c0 <.plt.sec@start+0xb0>    | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 1\nMOV 0x38(%RSP),%RAX                | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 0    | 0    | 3       | 0.33\nSUB %FS:0x28,%RAX                  | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.33\nJNE 25a3 <kernel+0x73>             | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50-1\nLEAVE                              | 2     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50\nRET                                | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50\n",
                },
              ],
            "header":
              [
              "Warnings:\n - The number of fused uops of the instruction [ENDBR64] is unknown\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
              "0% of peak computational performance is used (0.00 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))",
              ],
            "brief":
              [
              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 5.67 to 5.00 cycles (1.13x speedup).",
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "21% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 33% of SSE/AVX stores are used in vector version.\n - 18% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized function can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your function is poorly vectorized.\nOnly 31% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your function, you can lower the cost of an iteration from 5.67 to 4.83 cycles (1.17x speedup).",
                },
                {
                  "title": "Execution units bottlenecks",
                  "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
                },
              ],
            "potential":
              [
              ],
          },
          {
            "hint":
              [
                {
                  "details": "Calling (and then returning from) a function prevents many compiler optimizations (like vectorization), breaks control flow (which reduces pipeline performance) and executes extra instructions to save/restore the registers used inside it, which is very expensive (dozens of cycles). Consider to inline small functions.\n - unknown: 2 occurrences\n",
                  "title": "CALL instructions",
                  "txt": "Detected function call instructions.\n",
                },
                {
                  "details": "These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.\n - VPINSRQ: 2 occurrences\n",
                  "title": "Complex instructions",
                  "txt": "Detected COMPLEX INSTRUCTIONS.\n",
                },
                {
                  "title": "Type of elements and instruction set",
                  "txt": "No instructions are processing arithmetic or math operations on FP elements. This function is probably writing/copying data or processing integer elements.",
                },
                {
                  "title": "Matching between your function (in the source code) and the binary function",
                  "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 24 bytes.\nThe binary function is storing 48 bytes.",
                },
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 27\nnb uops            : 38\nloop length        : 126\nused x86 registers : 8\nused mmx registers : 0\nused xmm registers : 5\nused ymm registers : 2\nused zmm registers : 0\nnb stack references: 3\n",
                },
                {
                  "title": "Front-end",
                  "txt": "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 6.33 cycles\nfront end            : 6.33 cycles\n",
                },
                {
                  "title": "Back-end",
                  "txt": "       | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2  | FP3  | FP4  | FP5\n-------------------------------------------------------------------------------------------------------------\nuops   | 2.00      | 1.75 | 5.00 | 1.75 | 1.50 | 2.67 | 2.67 | 2.67 | 1.00 | 2.00 | 0.00 | 0.00 | 1.00 | 1.00\ncycles | 2.00      | 1.75 | 5.00 | 1.75 | 1.50 | 2.67 | 2.67 | 2.67 | 1.00 | 2.00 | 0.00 | 0.00 | 1.00 | 1.00\n\nExecution ports to units layout:\n - ALU0/BRU0: ALU\n - ALU1: ALU\n - ALU2: ALU\n - ALU3: ALU\n - BRU1: \n - AGU0 (256 bits): store address, load\n - AGU1 (256 bits): store address, load\n - AGU2 (256 bits): store address, load\n - FP0 (256 bits): VPU, DIV/SQRT\n - FP1 (256 bits): VPU, DIV/SQRT\n - FP2 (256 bits): VPU\n - FP3 (256 bits): VPU\n - FP4 (256 bits): FP store data\n - FP5 (256 bits): FP store data\n\nCycles executing div or sqrt instructions: NA\nCycles loading/storing data              : 2.50\n",
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 6.33\nDispatch  : 5.00\nOverall L1: 6.33\n",
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "all     : 21%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : 33%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 18%\n",
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "all     : 31%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : 50%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 26%\n",
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each call to the function takes 6.33 cycles. At this rate:\n - 3% of peak load performance is reached (3.79 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 11% of peak store performance is reached (7.58 out of 64.00 bytes stored per cycle (GB/s @ 1GHz))\n",
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 6.33 to 5.00 cycles (1.27x speedup).\n",
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the function is: 2530\n\nInstruction                        | Nb FU | ALU0/BRU0 | ALU1 | ALU2 | ALU3 | BRU1 | AGU0 | AGU1 | AGU2 | FP0  | FP1  | FP2 | FP3 | FP4  | FP5  | Latency | Recip. throughput\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nENDBR64\nPUSH %RBP                          | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50\nVMOVQ %RCX,%XMM2                   | 1     | 0         | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 2       | 1\nVMOVQ %RSI,%XMM3                   | 1     | 0         | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 2       | 1\nVMOVD %EDI,%XMM5                   | 1     | 0         | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 2       | 1\nMOV %RSP,%RBP                      | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.17\nAND $-0x20,%RSP                    | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25\nVPINSRQ $0x1,%RDX,%XMM3,%XMM0      | 2     | 0         | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 0   | 0   | 0    | 0    | 3       | 1\nVPINSRQ $0x1,%R8,%XMM2,%XMM1       | 2     | 0         | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 0   | 0   | 0    | 0    | 3       | 1\nSUB $0x40,%RSP                     | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25\nVINSERTI128 $0x1,%XMM1,%YMM0,%YMM4 | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 0    | 0    | 1       | 1\nXOR %ECX,%ECX                      | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25\nXOR %EDX,%EDX                      | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25\nMOV %FS:0x28,%RAX                  | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 0    | 0    | 3       | 0.33\nMOV %RAX,0x38(%RSP)                | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 0    | 0    | 4       | 0.50\nXOR %EAX,%EAX                      | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.25\nMOV %RSP,%RSI                      | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.17\nVMOVDQA %YMM4,(%RSP)               | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 4       | 1\nVMOVQ %XMM5,0x20(%RSP)             | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 1       | 1\nLEA -0x429(%RIP),%RDI              | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.25\nVZEROUPPER                         | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.17\nCALL 11c0 <.plt.sec@start+0xb0>    | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 1\nMOV 0x38(%RSP),%RAX                | 1     | 0         | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 0    | 0    | 3       | 0.33\nSUB %FS:0x28,%RAX                  | 1     | 0.25      | 0.25 | 0.25 | 0.25 | 0    | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.33\nJNE 25a3 <kernel+0x73>             | 1     | 0.50      | 0    | 0    | 0    | 0.50 | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 1       | 0.50-1\nCALL 1140 <.plt.sec@start+0x30>    | 6     | 0.50      | 0    | 0    | 0    | 0.50 | 0.33 | 0.33 | 0.33 | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 1\nNOPL (%RAX,%RAX,1)                 | 1     | 0         | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0       | 0.17\n",
                },
              ],
            "header":
              [
              "Warnings:\n - The number of fused uops of the instruction [ENDBR64] is unknown\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
              "0% of peak computational performance is used (0.00 out of 48.00 FLOP per cycle (GFLOPS @ 1GHz))",
              ],
            "brief":
              [
              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 6.33 to 5.00 cycles (1.27x speedup).",
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "21% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 33% of SSE/AVX stores are used in vector version.\n - 18% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized function can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your function is poorly vectorized.\nOnly 31% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your function, you can lower the cost of an iteration from 6.33 to 5.40 cycles (1.17x speedup).",
                },
                {
                  "title": "Execution units bottlenecks",
                  "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
                },
              ],
            "potential":
              [
              ],
          },
        ],
      "common":
        {
          "header":
            [
            "The function is defined in /home/sofiane/AOC/tp-rendu/AOC/kernel.c:118-121,137.\n",
            "The structure of this function is probably <if then [else] end>.\n",
            "The presence of multiple execution paths is typically the main/first bottleneck.\nTry to simplify control inside function: ideally, try to remove all conditional expressions, for example by (if applicable):\n - hoisting them (moving them outside the function)\n - turning them into conditional moves, MIN or MAX\n\n",
            "Ex: if (x<0) x=0 => x = (x<0 ? 0 : x) (or MAX(0,x) after defining the corresponding macro)\n",
            ],
          "nb_paths": 2,
        },
    },
}
